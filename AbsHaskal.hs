module AbsHaskal where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Boolean =
   BoolT
 | BoolF
  deriving (Eq,Ord,Show)

data Exp =
   EEq Exp Exp
 | ENeq Exp Exp
 | ELsr Exp Exp
 | EGtr Exp Exp
 | ELeq Exp Exp
 | EGeq Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EInt Integer
 | EOr Exp Exp
 | EAnd Exp Exp
 | ENot Exp
 | EBool Boolean
 | EVar Ident
  deriving (Eq,Ord,Show)

data Stmt =
   SIf Exp Stmt
 | SIfElse Exp Stmt Stmt
 | SPrint Exp
 | SWhile Exp Stmt
 | SAssign Ident AssignOp Exp
 | SIter Ident IterOp
 | SCompound [Stmt]
 | SProcCall Ident [Arg]
  deriving (Eq,Ord,Show)

data AssignOp =
   Assign
 | AssignMul
 | AssignDiv
 | AssignAdd
 | AssignSub
 | AssignAnd
 | AssignOr
  deriving (Eq,Ord,Show)

data IterOp =
   IterInc
 | IterDec
  deriving (Eq,Ord,Show)

data TypeSpec =
   TBool
 | TInt
  deriving (Eq,Ord,Show)

data ParamSpec =
   PVar
 | PVal
  deriving (Eq,Ord,Show)

data Arg =
   ExpArg Exp
  deriving (Eq,Ord,Show)

data Param =
   ParamDecl ParamSpec TypeSpec Ident
  deriving (Eq,Ord,Show)

data Decl =
   VarDecl TypeSpec Ident
 | ProcDecl Ident [Param] Block
  deriving (Eq,Ord,Show)

data Block =
   ScopeBlock [Decl] Stmt
  deriving (Eq,Ord,Show)

