-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParHaskal where
import AbsHaskal
import LexHaskal
import ErrM

}

%name pBoolean Boolean
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp4 Exp4
%name pExp3 Exp3
%name pListStmt ListStmt
%name pListArg ListArg
%name pStmt Stmt
%name pAssignOp AssignOp
%name pIterOp IterOp
%name pListDecl ListDecl
%name pListParam ListParam
%name pTypeSpec TypeSpec
%name pParamSpec ParamSpec
%name pArg Arg
%name pParam Param
%name pDecl Decl
%name pBlock Block

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '&&' { PT _ (TS _ 3) }
 '&=' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 '*' { PT _ (TS _ 7) }
 '*=' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 '+=' { PT _ (TS _ 11) }
 ',' { PT _ (TS _ 12) }
 '-' { PT _ (TS _ 13) }
 '--' { PT _ (TS _ 14) }
 '-=' { PT _ (TS _ 15) }
 '/' { PT _ (TS _ 16) }
 '/=' { PT _ (TS _ 17) }
 ';' { PT _ (TS _ 18) }
 '<' { PT _ (TS _ 19) }
 '<=' { PT _ (TS _ 20) }
 '=' { PT _ (TS _ 21) }
 '==' { PT _ (TS _ 22) }
 '>' { PT _ (TS _ 23) }
 '>=' { PT _ (TS _ 24) }
 'False' { PT _ (TS _ 25) }
 'True' { PT _ (TS _ 26) }
 'bool' { PT _ (TS _ 27) }
 'else' { PT _ (TS _ 28) }
 'if' { PT _ (TS _ 29) }
 'int' { PT _ (TS _ 30) }
 'print' { PT _ (TS _ 31) }
 'proc' { PT _ (TS _ 32) }
 'val' { PT _ (TS _ 33) }
 'var' { PT _ (TS _ 34) }
 'while' { PT _ (TS _ 35) }
 '{' { PT _ (TS _ 36) }
 '|=' { PT _ (TS _ 37) }
 '||' { PT _ (TS _ 38) }
 '}' { PT _ (TS _ 39) }

L_integ  { PT _ (TI $$) }
L_ident  { PT _ (TV $$) }
L_err    { _ }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Ident   :: { Ident }   : L_ident  { Ident $1 }

Boolean :: { Boolean }
Boolean : 'True' { BoolT } 
  | 'False' { BoolF }


Exp :: { Exp }
Exp : Exp '==' Exp { EEq $1 $3 } 
  | Exp '!=' Exp { ENeq $1 $3 }
  | Exp '<' Exp { ELsr $1 $3 }
  | Exp '>' Exp { EGtr $1 $3 }
  | Exp '<=' Exp { ELeq $1 $3 }
  | Exp '>=' Exp { EGeq $1 $3 }
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp1 { EAdd $1 $3 } 
  | Exp1 '-' Exp1 { ESub $1 $3 }
  | Exp1 '||' Exp1 { EOr $1 $3 }
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 '*' Exp2 { EMul $1 $3 } 
  | Exp2 '/' Exp2 { EDiv $1 $3 }
  | Exp2 '&&' Exp2 { EAnd $1 $3 }
  | Exp3 { $1 }


Exp4 :: { Exp }
Exp4 : Integer { EInt $1 } 
  | Boolean { EBool $1 }
  | Ident { EVar $1 }
  | '(' Exp ')' { $2 }


Exp3 :: { Exp }
Exp3 : '!' Exp3 { ENot $2 } 
  | Exp4 { $1 }


ListStmt :: { [Stmt] }
ListStmt : {- empty -} { [] } 
  | Stmt { (:[]) $1 }
  | Stmt ';' ListStmt { (:) $1 $3 }


ListArg :: { [Arg] }
ListArg : {- empty -} { [] } 
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }


Stmt :: { Stmt }
Stmt : 'if' '(' Exp ')' Stmt { SIf $3 $5 } 
  | 'if' '(' Exp ')' Stmt 'else' Stmt { SIfElse $3 $5 $7 }
  | 'print' Exp { SPrint $2 }
  | 'while' '(' Exp ')' Stmt { SWhile $3 $5 }
  | Ident AssignOp Exp { SAssign $1 $2 $3 }
  | Ident IterOp { SIter $1 $2 }
  | '{' ListStmt '}' { SCompound $2 }
  | Ident '(' ListArg ')' { SProcCall $1 $3 }


AssignOp :: { AssignOp }
AssignOp : '=' { Assign } 
  | '*=' { AssignMul }
  | '/=' { AssignDiv }
  | '+=' { AssignAdd }
  | '-=' { AssignSub }
  | '&=' { AssignAnd }
  | '|=' { AssignOr }


IterOp :: { IterOp }
IterOp : '++' { IterInc } 
  | '--' { IterDec }


ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } 
  | ListDecl Decl ';' { flip (:) $1 $2 }


ListParam :: { [Param] }
ListParam : {- empty -} { [] } 
  | Param { (:[]) $1 }
  | Param ',' ListParam { (:) $1 $3 }


TypeSpec :: { TypeSpec }
TypeSpec : 'bool' { TBool } 
  | 'int' { TInt }


ParamSpec :: { ParamSpec }
ParamSpec : 'var' { PVar } 
  | 'val' { PVal }


Arg :: { Arg }
Arg : Exp { ExpArg $1 } 


Param :: { Param }
Param : ParamSpec TypeSpec Ident { ParamDecl $1 $2 $3 } 


Decl :: { Decl }
Decl : 'var' TypeSpec Ident { VarDecl $2 $3 } 
  | 'proc' Ident '(' ListParam ')' Block { ProcDecl $2 $4 $6 }


Block :: { Block }
Block : ListDecl Stmt { ScopeBlock (reverse $1) $2 } 



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

